(()=>{"use strict";const t=(t,e=!1)=>{const s=[],a=()=>r=!0!==r,i=(t,e,i)=>{i.receiveAttack(t,e),s.push([t,e]),a()},n=()=>e;let r=!0;const c=()=>Math.floor(10*Math.random())+1;return{name:t,isTurn:()=>r,changeTurn:a,attack:i,getIsComputer:n,randomAttack:t=>{const e=[c(),c()],a=[c(),c()],r=(t,e)=>s.some((s=>JSON.stringify(s)===JSON.stringify([t,e])))?(t=[c(),c()],e=[c(),c()],r(t,e)):void 0;!0===n()&&(r(e,a),i(e,a,t))},getAttacksSent:()=>s}},e=()=>{const t=[],e=[];return{placeShip:(t,s,a)=>{a.setCoordinates(t,s),e.push(a)},getMissedAttacks:()=>t,receiveAttack:(s,a)=>{const i=e.find((t=>JSON.stringify(t.getCoordinates())===JSON.stringify([s,a])));return i?(i.hit(1),"Attack successful!"):(t.push([s,a]),"The attack missed!")},getShipsOnBoard:()=>e,allSunk:()=>e.every((t=>!0===t.isSunk()))}},s=(t,e,s=0,a=!1)=>{const i=[],n=()=>s,r=()=>t;return{name:e,getLength:r,hit:t=>s+=t,getHits:n,isSunk:()=>{const t=r();return n()>=t},getCoordinates:()=>i,setCoordinates:(t,e)=>i.push(t,e)}};(a=>{t("Ezsean");const i=e(),n=(t("Computer",!0),e()),r=s(5,"carrier"),c=s(4,"battleship"),p=s(3,"destroyer"),o=s(3,"submarine"),h=s(2,"Patrol Boat");i.placeShip([0,0],[0,5],r),i.placeShip([9,0],[9,3],c),i.placeShip([3,5],[5,5],p),i.placeShip([7,7],[9,7],o),i.placeShip([8,8],[9,8],h),n.placeShip([0,0],[0,5],r),n.placeShip([9,0],[9,3],c),n.placeShip([3,5],[5,5],p),n.placeShip([7,7],[9,7],o),n.placeShip([8,8],[9,8],h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,