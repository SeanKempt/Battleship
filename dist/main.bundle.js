(()=>{"use strict";const t=(t,e,s=0,n=!1)=>{const o=[],r=()=>s,i=()=>t;return{name:e,getLength:i,hit:t=>s+=t,getHits:r,isSunk:()=>{const t=i();return r()>=t},getCoordinates:()=>o,setCoordinates:(t,e)=>o.push(t,e)}},e=((t,e=!1)=>{const s=[],n=()=>i=!0!==i,o=(t,e,o)=>{o.receiveAttack(t,e),s.push([t,e]),n()},r=()=>e;let i=!0;const c=()=>i,a=()=>Math.floor(10*Math.random())+1;return{name:"computerPlayer",isTurn:c,changeTurn:n,attack:o,getIsComputer:r,randomAttack:t=>{const e=[a(),a()],n=[a(),a()],i=(t,e)=>s.some((s=>JSON.stringify(s)===JSON.stringify([t,e])))?(t=[a(),a()],e=[a(),a()],i(t,e)):void 0;!0===r()&&!0===c()&&(i(e,n),o(e,n,t))},getAttacksSent:()=>s}})(0,!0),s=t(4,"destroyer"),n=t(2,"skif"),o=(t(2,"submarine"),(()=>{const t=[],e=[];return{placeShip:(t,s,n)=>{n.setCoordinates(t,s),e.push(n)},getMissedAttacks:()=>t,receiveAttack:(s,n)=>{const o=e.find((t=>JSON.stringify(t.getCoordinates())===JSON.stringify([s,n])));return o?(o.hit(1),"Attack successful!"):(t.push([s,n]),"The attack missed!")},getShipsOnBoard:()=>e,allSunk:()=>e.every((t=>!0===t.isSunk()))}})());o.placeShip([0,3],[3,0],s),o.placeShip([1,3],[2,3],n),console.log(s.getHits()),o.receiveAttack([0,3],[3,0]),console.log(s.getHits()),e.randomAttack(o),console.log(e.getAttacksSent())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,